// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package client

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Defines values for AssignmentRewardType.
const (
	WARBOND AssignmentRewardType = 1
)

// Defines values for AssignmentTaskType.
const (
	LIBERATEPLANET AssignmentTaskType = 11
)

// Defines values for AssignmentType.
const (
	MAJORORDER AssignmentType = 4
)

// Defines values for EventTypeEnum.
const (
	N1 EventTypeEnum = 1
)

// Defines values for FactionEnum.
const (
	AUTOMATONS FactionEnum = 3
	SUPEREARTH FactionEnum = 1
	TERMINIDS  FactionEnum = 2
)

// ActiveElectionPolicyEffect Placeholder object from WarSeasonStatus, purpose unknown
type ActiveElectionPolicyEffect = map[string]interface{}

// Assignment defines model for Assignment.
type Assignment struct {
	// ExpireIn Seconds until assignment expiration
	ExpireIn int64   `json:"expireIn"`
	Id       int64   `json:"id"`
	Progress []int32 `json:"progress"`
	Setting  struct {
		// Flags Purpose unknown
		Flags int32 `json:"flags"`

		// OverrideBrief Assignment description
		OverrideBrief string `json:"overrideBrief"`

		// OverrideTitle Assignment type title
		OverrideTitle string `json:"overrideTitle"`

		// Reward Reward granted upon assignment successful completion
		Reward          AssignmentReward `json:"reward"`
		TaskDescription string           `json:"taskDescription"`
		Tasks           []AssignmentTask `json:"tasks"`

		// Type Assignment type, all values are not known yet
		// Guesses:
		//   * 4: Major order
		Type AssignmentType `json:"type"`
	} `json:"setting"`
}

// AssignmentReward Reward granted upon assignment successful completion
type AssignmentReward struct {
	// Amount the amount of reward type granted upon success
	Amount int32 `json:"amount"`

	// Id32 internal identifier, purpose unknown
	Id32 int32 `json:"id32"`

	// Type Type of currency / reward granted upon assignment completion
	// Hypothesis:
	//   * 1: Warbond medal
	Type AssignmentRewardType `json:"type"`
}

// AssignmentRewardType Type of currency / reward granted upon assignment completion
// Hypothesis:
//   - 1: Warbond medal
type AssignmentRewardType int32

// AssignmentTask defines model for AssignmentTask.
type AssignmentTask struct {
	// Type Assignment task type, all values are not known yet
	// Guesses:
	//   * 11: Liberate planet
	Type        AssignmentTaskType `json:"type"`
	Values      []int32            `json:"values"`
	ValuesTypes []int32            `json:"valuesTypes"`
}

// AssignmentTaskType Assignment task type, all values are not known yet
// Guesses:
//   - 11: Liberate planet
type AssignmentTaskType int

// AssignmentType Assignment type, all values are not known yet
// Guesses:
//   - 4: Major order
type AssignmentType int

// BattleStatistics defines model for BattleStatistics.
type BattleStatistics struct {
	// Accurracy Player accuracy, ranges from 0 to 100. Typo is intentional, it is present in the upstream API
	Accuracy       int64 `json:"accurracy"`
	AutomatonKills int64 `json:"automatonKills"`
	BugKills       int64 `json:"bugKills"`

	// BulletsFired Total bullet fired. Values does not match with bulletHit statistics, as sometimes there are more bullet hits than fired.
	BulletsFired int64 `json:"bulletsFired"`

	// BulletsHit Total bullet hits. Values does not match with bulletFired statistics, as sometimes there are more bullet hits than fired.
	BulletsHit int64 `json:"bulletsHit"`

	// Deaths Cumulative number of helldivers deaths on duty
	Deaths int64 `json:"deaths"`

	// Friendlies Number of friendly kills ? Unsure.
	Friendlies      int64 `json:"friendlies"`
	IlluminateKills int64 `json:"illuminateKills"`

	// MissionSuccessRate Rate of mission success. Range from 0 to 100.
	MissionSuccessRate int64 `json:"missionSuccessRate"`
	MissionTime        int64 `json:"missionTime"`
	MissionsLost       int64 `json:"missionsLost"`
	MissionsWon        int64 `json:"missionsWon"`

	// Revives Number of revive stratagems used. Unclear as if whole teams revive after a wipe are counted.
	Revives int64 `json:"revives"`

	// TimePlayed cumulative number of seconds spent on mission
	TimePlayed int64 `json:"timePlayed"`
}

// CommunityTarget Placeholder object from WarSeasonStatus, purpose unknown
type CommunityTarget = map[string]interface{}

// EventTypeEnum Placeholder enum, values are not known
type EventTypeEnum int

// FactionEnum Identifier for a given Faction.
// * `1`: Super Earth
// * `2`: Terminids
// * `3`: Automatons
type FactionEnum int

// GlobalEvent Placeholder object from WarSeasonStatus, purpose unknown
type GlobalEvent = map[string]interface{}

// JointOperation defines model for JointOperation.
type JointOperation struct {
	// HqNodeIndex Purpose unknown
	HqNodeIndex int32 `json:"hqNodeIndex"`
	Id          int32 `json:"id"`
	PlanetIndex int32 `json:"planetIndex"`
}

// NewsEntry defines model for NewsEntry.
type NewsEntry struct {
	Id int32 `json:"id"`

	// Message Event message
	Message string `json:"message"`

	// Published Timestamp delta from war start ?
	Published int64         `json:"published"`
	TagIds    []interface{} `json:"tagIds"`

	// Type Always 0, purpose unknown
	Type int32 `json:"type"`
}

// PlanetActiveEffect Placeholder object from WarSeasonStatus, purpose unknown
type PlanetActiveEffect = map[string]interface{}

// PlanetAttack Edge in a directed graph. Represent supply lanes for available planet liberations.
type PlanetAttack struct {
	// Destination ID of a planet
	Destination int32 `json:"destination"`

	// Source ID of a planet
	Source int32 `json:"source"`
}

// PlanetEvent defines model for PlanetEvent.
type PlanetEvent struct {
	CampaignId int32 `json:"campaignId"`

	// EventType Placeholder enum, values are not known
	EventType EventTypeEnum `json:"eventType"`

	// ExpireTime Timestamp delta from war start ?
	ExpireTime int64 `json:"expireTime"`

	// Health Current health of the planet for this event
	Health int32 `json:"health"`
	Id     int32 `json:"id"`

	// JointOperationIds Links with the id present in objects from the "jointOperation" field in the response root.
	JointOperationIds []int32 `json:"jointOperationIds"`

	// MaxHealth Current health of the planet for this event
	MaxHealth   int32 `json:"maxHealth"`
	PlanetIndex int32 `json:"planetIndex"`

	// Race Identifier for a given Faction.
	// * `1`: Super Earth
	// * `2`: Terminids
	// * `3`: Automatons
	Race FactionEnum `json:"race"`

	// StartTime Timestamp delta from war start ?
	StartTime int64 `json:"startTime"`
}

// PlanetInfo defines model for PlanetInfo.
type PlanetInfo struct {
	// Disabled Purpose unknown, always false, might be used for future events
	Disabled bool  `json:"disabled"`
	Index    int32 `json:"index"`

	// InitialOwner Identifier for a given Faction.
	// * `1`: Super Earth
	// * `2`: Terminids
	// * `3`: Automatons
	InitialOwner FactionEnum `json:"initialOwner"`

	// MaxHealth Maximum health of the planet
	MaxHealth int32 `json:"maxHealth"`
	Position  struct {
		X float32 `json:"x"`
		Y float32 `json:"y"`
	} `json:"position"`

	// Sector Planet sector index
	Sector int32 `json:"sector"`

	// SettingsHash Purpose unknown
	SettingsHash int64 `json:"settingsHash"`

	// Waypoints Planet indexes that can be reached from this planet
	Waypoints []int32 `json:"waypoints"`
}

// PlanetStatus defines model for PlanetStatus.
type PlanetStatus struct {
	// Health Current health of the planet, seems to be capped at 1000000 for all the planets.
	Health int32 `json:"health"`

	// Index The planet identifier, used as a reference in other resources.
	Index int32 `json:"index"`

	// Owner Identifier for a given Faction.
	// * `1`: Super Earth
	// * `2`: Terminids
	// * `3`: Automatons
	Owner FactionEnum `json:"owner"`

	// Players Currently active helldivers on this planet
	Players int32 `json:"players"`

	// RegenPerSecond Health regeneration of the planet.
	// Notes:
	// * Most human planets seems to have a regeneration rate of 1388.8889 when no activity has occurred for a while.
	// * Hypothesis: planet regeneration rate go up based of the time spent at peace
	// * At time of writing, only the 4 values present in examples are used on all planets ([4.1666665, 2.777778, 0, 1388.8889])
	RegenPerSecond float32 `json:"regenPerSecond"`
}

// SuperEarthWarResult Placeholder object from WarSeasonStatus, purpose unknown
type SuperEarthWarResult = map[string]interface{}

// WarSeasonInfo defines model for WarSeasonInfo.
type WarSeasonInfo struct {
	EndDate    int64 `json:"endDate"`
	HomeWorlds []struct {
		PlanetIndices []int32 `json:"planetIndices"`

		// Race Identifier for a given Faction.
		// * `1`: Super Earth
		// * `2`: Terminids
		// * `3`: Automatons
		Race FactionEnum `json:"race"`
	} `json:"homeWorlds"`

	// MinimumClientVersion Minimum client version. Does not seems to match client version. Follows semver format.
	MinimumClientVersion string       `json:"minimumClientVersion"`
	PlanetInfos          []PlanetInfo `json:"planetInfos"`
	StartDate            int64        `json:"startDate"`
	WarId                int32        `json:"warId"`
}

// WarSeasonStatus defines model for WarSeasonStatus.
type WarSeasonStatus struct {
	ActiveElectionPolicyEffects []ActiveElectionPolicyEffect `json:"activeElectionPolicyEffects"`
	CommunityTargets            []CommunityTarget            `json:"communityTargets"`
	GlobalEvents                []GlobalEvent                `json:"globalEvents"`

	// ImpactMultiplier Purpose unknown
	ImpactMultiplier    float32              `json:"impactMultiplier"`
	JointOperations     []JointOperation     `json:"jointOperations"`
	PlanetActiveEffects []PlanetActiveEffect `json:"planetActiveEffects"`
	PlanetAttacks       []PlanetAttack       `json:"planetAttacks"`
	PlanetEvents        []PlanetEvent        `json:"planetEvents"`
	PlanetStatus        []PlanetStatus       `json:"planetStatus"`

	// StoryBeatId32 Purpose unknown
	StoryBeatId32        int64                 `json:"storyBeatId32"`
	SuperEarthWarResults []SuperEarthWarResult `json:"superEarthWarResults"`

	// Time Current timestamp from the beginning of the war ? Seems to incease with a 10 step.
	Time int64 `json:"time"`

	// WarId The war identifier
	WarId int32 `json:"warId"`
}

// WarStatistics defines model for WarStatistics.
type WarStatistics struct {
	GalaxyStats  BattleStatistics `json:"galaxy_stats"`
	PlanetsStats []struct {
		// Accurracy Player accuracy, ranges from 0 to 100. Typo is intentional, it is present in the upstream API
		Accuracy       int64 `json:"accurracy"`
		AutomatonKills int64 `json:"automatonKills"`
		BugKills       int64 `json:"bugKills"`

		// BulletsFired Total bullet fired. Values does not match with bulletHit statistics, as sometimes there are more bullet hits than fired.
		BulletsFired int64 `json:"bulletsFired"`

		// BulletsHit Total bullet hits. Values does not match with bulletFired statistics, as sometimes there are more bullet hits than fired.
		BulletsHit int64 `json:"bulletsHit"`

		// Deaths Cumulative number of helldivers deaths on duty
		Deaths int64 `json:"deaths"`

		// Friendlies Number of friendly kills ? Unsure.
		Friendlies      int64 `json:"friendlies"`
		IlluminateKills int64 `json:"illuminateKills"`

		// MissionSuccessRate Rate of mission success. Range from 0 to 100.
		MissionSuccessRate int64 `json:"missionSuccessRate"`
		MissionTime        int64 `json:"missionTime"`
		MissionsLost       int64 `json:"missionsLost"`
		MissionsWon        int64 `json:"missionsWon"`
		PlanetIndex        int32 `json:"planetIndex"`

		// Revives Number of revive stratagems used. Unclear as if whole teams revive after a wipe are counted.
		Revives int64 `json:"revives"`

		// TimePlayed cumulative number of seconds spent on mission
		TimePlayed int64 `json:"timePlayed"`
	} `json:"planets_stats"`
}

// GetNewsFeedWarIdParams defines parameters for GetNewsFeedWarId.
type GetNewsFeedWarIdParams struct {
	// FromTimestamp Timestamp used for pagination, entries before will be ignored.
	FromTimestamp *int `form:"fromTimestamp,omitempty" json:"fromTimestamp,omitempty"`

	// AcceptLanguage Language for event messages
	AcceptLanguage *string `json:"accept-language,omitempty"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetNewsFeedWarId request
	GetNewsFeedWarId(ctx context.Context, warId int, params *GetNewsFeedWarIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatsWarWarIdSummary request
	GetStatsWarWarIdSummary(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWarSeasonWarIdStatus request
	GetWarSeasonWarIdStatus(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWarSeasonWarIdWarInfo request
	GetWarSeasonWarIdWarInfo(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2AssignmentWarWarId request
	GetV2AssignmentWarWarId(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetNewsFeedWarId(ctx context.Context, warId int, params *GetNewsFeedWarIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNewsFeedWarIdRequest(c.Server, warId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatsWarWarIdSummary(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatsWarWarIdSummaryRequest(c.Server, warId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWarSeasonWarIdStatus(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWarSeasonWarIdStatusRequest(c.Server, warId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWarSeasonWarIdWarInfo(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWarSeasonWarIdWarInfoRequest(c.Server, warId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2AssignmentWarWarId(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2AssignmentWarWarIdRequest(c.Server, warId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetNewsFeedWarIdRequest generates requests for GetNewsFeedWarId
func NewGetNewsFeedWarIdRequest(server string, warId int, params *GetNewsFeedWarIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "war_id", runtime.ParamLocationPath, warId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/NewsFeed/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FromTimestamp != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fromTimestamp", runtime.ParamLocationQuery, *params.FromTimestamp); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "accept-language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("accept-language", headerParam0)
		}

	}

	return req, nil
}

// NewGetStatsWarWarIdSummaryRequest generates requests for GetStatsWarWarIdSummary
func NewGetStatsWarWarIdSummaryRequest(server string, warId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "war_id", runtime.ParamLocationPath, warId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Stats/war/%s/summary", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWarSeasonWarIdStatusRequest generates requests for GetWarSeasonWarIdStatus
func NewGetWarSeasonWarIdStatusRequest(server string, warId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "war_id", runtime.ParamLocationPath, warId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/WarSeason/%s/Status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWarSeasonWarIdWarInfoRequest generates requests for GetWarSeasonWarIdWarInfo
func NewGetWarSeasonWarIdWarInfoRequest(server string, warId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "war_id", runtime.ParamLocationPath, warId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/WarSeason/%s/WarInfo", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2AssignmentWarWarIdRequest generates requests for GetV2AssignmentWarWarId
func NewGetV2AssignmentWarWarIdRequest(server string, warId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "war_id", runtime.ParamLocationPath, warId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/Assignment/War/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetNewsFeedWarIdWithResponse request
	GetNewsFeedWarIdWithResponse(ctx context.Context, warId int, params *GetNewsFeedWarIdParams, reqEditors ...RequestEditorFn) (*GetNewsFeedWarIdResponse, error)

	// GetStatsWarWarIdSummaryWithResponse request
	GetStatsWarWarIdSummaryWithResponse(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*GetStatsWarWarIdSummaryResponse, error)

	// GetWarSeasonWarIdStatusWithResponse request
	GetWarSeasonWarIdStatusWithResponse(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*GetWarSeasonWarIdStatusResponse, error)

	// GetWarSeasonWarIdWarInfoWithResponse request
	GetWarSeasonWarIdWarInfoWithResponse(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*GetWarSeasonWarIdWarInfoResponse, error)

	// GetV2AssignmentWarWarIdWithResponse request
	GetV2AssignmentWarWarIdWithResponse(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*GetV2AssignmentWarWarIdResponse, error)
}

type GetNewsFeedWarIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]NewsEntry
}

// Status returns HTTPResponse.Status
func (r GetNewsFeedWarIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNewsFeedWarIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatsWarWarIdSummaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WarStatistics
}

// Status returns HTTPResponse.Status
func (r GetStatsWarWarIdSummaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatsWarWarIdSummaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWarSeasonWarIdStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WarSeasonStatus
}

// Status returns HTTPResponse.Status
func (r GetWarSeasonWarIdStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWarSeasonWarIdStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWarSeasonWarIdWarInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WarSeasonInfo
}

// Status returns HTTPResponse.Status
func (r GetWarSeasonWarIdWarInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWarSeasonWarIdWarInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2AssignmentWarWarIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Assignment
}

// Status returns HTTPResponse.Status
func (r GetV2AssignmentWarWarIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2AssignmentWarWarIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetNewsFeedWarIdWithResponse request returning *GetNewsFeedWarIdResponse
func (c *ClientWithResponses) GetNewsFeedWarIdWithResponse(ctx context.Context, warId int, params *GetNewsFeedWarIdParams, reqEditors ...RequestEditorFn) (*GetNewsFeedWarIdResponse, error) {
	rsp, err := c.GetNewsFeedWarId(ctx, warId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNewsFeedWarIdResponse(rsp)
}

// GetStatsWarWarIdSummaryWithResponse request returning *GetStatsWarWarIdSummaryResponse
func (c *ClientWithResponses) GetStatsWarWarIdSummaryWithResponse(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*GetStatsWarWarIdSummaryResponse, error) {
	rsp, err := c.GetStatsWarWarIdSummary(ctx, warId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatsWarWarIdSummaryResponse(rsp)
}

// GetWarSeasonWarIdStatusWithResponse request returning *GetWarSeasonWarIdStatusResponse
func (c *ClientWithResponses) GetWarSeasonWarIdStatusWithResponse(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*GetWarSeasonWarIdStatusResponse, error) {
	rsp, err := c.GetWarSeasonWarIdStatus(ctx, warId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWarSeasonWarIdStatusResponse(rsp)
}

// GetWarSeasonWarIdWarInfoWithResponse request returning *GetWarSeasonWarIdWarInfoResponse
func (c *ClientWithResponses) GetWarSeasonWarIdWarInfoWithResponse(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*GetWarSeasonWarIdWarInfoResponse, error) {
	rsp, err := c.GetWarSeasonWarIdWarInfo(ctx, warId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWarSeasonWarIdWarInfoResponse(rsp)
}

// GetV2AssignmentWarWarIdWithResponse request returning *GetV2AssignmentWarWarIdResponse
func (c *ClientWithResponses) GetV2AssignmentWarWarIdWithResponse(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*GetV2AssignmentWarWarIdResponse, error) {
	rsp, err := c.GetV2AssignmentWarWarId(ctx, warId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2AssignmentWarWarIdResponse(rsp)
}

// ParseGetNewsFeedWarIdResponse parses an HTTP response from a GetNewsFeedWarIdWithResponse call
func ParseGetNewsFeedWarIdResponse(rsp *http.Response) (*GetNewsFeedWarIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNewsFeedWarIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []NewsEntry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStatsWarWarIdSummaryResponse parses an HTTP response from a GetStatsWarWarIdSummaryWithResponse call
func ParseGetStatsWarWarIdSummaryResponse(rsp *http.Response) (*GetStatsWarWarIdSummaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatsWarWarIdSummaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WarStatistics
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetWarSeasonWarIdStatusResponse parses an HTTP response from a GetWarSeasonWarIdStatusWithResponse call
func ParseGetWarSeasonWarIdStatusResponse(rsp *http.Response) (*GetWarSeasonWarIdStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWarSeasonWarIdStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WarSeasonStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetWarSeasonWarIdWarInfoResponse parses an HTTP response from a GetWarSeasonWarIdWarInfoWithResponse call
func ParseGetWarSeasonWarIdWarInfoResponse(rsp *http.Response) (*GetWarSeasonWarIdWarInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWarSeasonWarIdWarInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WarSeasonInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV2AssignmentWarWarIdResponse parses an HTTP response from a GetV2AssignmentWarWarIdWithResponse call
func ParseGetV2AssignmentWarWarIdResponse(rsp *http.Response) (*GetV2AssignmentWarWarIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2AssignmentWarWarIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Assignment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /NewsFeed/{war_id})
	GetNewsFeedWarId(ctx echo.Context, warId int, params GetNewsFeedWarIdParams) error

	// (GET /Stats/war/{war_id}/summary)
	GetStatsWarWarIdSummary(ctx echo.Context, warId int) error

	// (GET /WarSeason/{war_id}/Status)
	GetWarSeasonWarIdStatus(ctx echo.Context, warId int) error

	// (GET /WarSeason/{war_id}/WarInfo)
	GetWarSeasonWarIdWarInfo(ctx echo.Context, warId int) error

	// (GET /v2/Assignment/War/{war_id})
	GetV2AssignmentWarWarId(ctx echo.Context, warId int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetNewsFeedWarId converts echo context to params.
func (w *ServerInterfaceWrapper) GetNewsFeedWarId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "war_id" -------------
	var warId int

	err = runtime.BindStyledParameterWithOptions("simple", "war_id", ctx.Param("war_id"), &warId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter war_id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNewsFeedWarIdParams
	// ------------- Optional query parameter "fromTimestamp" -------------

	err = runtime.BindQueryParameter("form", true, false, "fromTimestamp", ctx.QueryParams(), &params.FromTimestamp)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fromTimestamp: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Optional header parameter "accept-language" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("accept-language")]; found {
		var AcceptLanguage string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for accept-language, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "accept-language", valueList[0], &AcceptLanguage, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accept-language: %s", err))
		}

		params.AcceptLanguage = &AcceptLanguage
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNewsFeedWarId(ctx, warId, params)
	return err
}

// GetStatsWarWarIdSummary converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatsWarWarIdSummary(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "war_id" -------------
	var warId int

	err = runtime.BindStyledParameterWithOptions("simple", "war_id", ctx.Param("war_id"), &warId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter war_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStatsWarWarIdSummary(ctx, warId)
	return err
}

// GetWarSeasonWarIdStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetWarSeasonWarIdStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "war_id" -------------
	var warId int

	err = runtime.BindStyledParameterWithOptions("simple", "war_id", ctx.Param("war_id"), &warId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter war_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetWarSeasonWarIdStatus(ctx, warId)
	return err
}

// GetWarSeasonWarIdWarInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetWarSeasonWarIdWarInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "war_id" -------------
	var warId int

	err = runtime.BindStyledParameterWithOptions("simple", "war_id", ctx.Param("war_id"), &warId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter war_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetWarSeasonWarIdWarInfo(ctx, warId)
	return err
}

// GetV2AssignmentWarWarId converts echo context to params.
func (w *ServerInterfaceWrapper) GetV2AssignmentWarWarId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "war_id" -------------
	var warId int

	err = runtime.BindStyledParameterWithOptions("simple", "war_id", ctx.Param("war_id"), &warId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter war_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV2AssignmentWarWarId(ctx, warId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/NewsFeed/:war_id", wrapper.GetNewsFeedWarId)
	router.GET(baseURL+"/Stats/war/:war_id/summary", wrapper.GetStatsWarWarIdSummary)
	router.GET(baseURL+"/WarSeason/:war_id/Status", wrapper.GetWarSeasonWarIdStatus)
	router.GET(baseURL+"/WarSeason/:war_id/WarInfo", wrapper.GetWarSeasonWarIdWarInfo)
	router.GET(baseURL+"/v2/Assignment/War/:war_id", wrapper.GetV2AssignmentWarWarId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
