// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package client

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Defines values for AssignmentRewardType.
const (
	WARBOND AssignmentRewardType = 1
)

// Defines values for AssignmentTaskType.
const (
	LIBERATEPLANET AssignmentTaskType = 11
)

// Defines values for AssignmentType.
const (
	MAJORORDER AssignmentType = 4
)

// Defines values for EventTypeEnum.
const (
	N1 EventTypeEnum = 1
)

// Defines values for FactionEnum.
const (
	AUTOMATONS FactionEnum = 3
	SUPEREARTH FactionEnum = 1
	TERMINIDS  FactionEnum = 2
)

// ActiveElectionPolicyEffect Placeholder object from WarSeasonStatus, purpose unknown
type ActiveElectionPolicyEffect = map[string]interface{}

// Assignment defines model for Assignment.
type Assignment struct {
	// ExpireIn Seconds until assignment expiration
	ExpireIn int64   `json:"expireIn"`
	Id       int64   `json:"id"`
	Progress []int32 `json:"progress"`
	Setting  struct {
		// Flags Purpose unknown
		Flags int32 `json:"flags"`

		// OverrideBrief Assignment description
		OverrideBrief string `json:"overrideBrief"`

		// OverrideTitle Assignment type title
		OverrideTitle string `json:"overrideTitle"`

		// Reward Reward granted upon assignment successful completion
		Reward          AssignmentReward `json:"reward"`
		TaskDescription string           `json:"taskDescription"`
		Tasks           []AssignmentTask `json:"tasks"`

		// Type Assignment type, all values are not known yet
		// Guesses:
		//   * 4: Major order
		Type AssignmentType `json:"type"`
	} `json:"setting"`
}

// AssignmentReward Reward granted upon assignment successful completion
type AssignmentReward struct {
	// Amount the amount of reward type granted upon success
	Amount int32 `json:"amount"`

	// Id32 internal identifier, purpose unknown
	Id32 int32 `json:"id32"`

	// Type Type of currency / reward granted upon assignment completion
	// Hypothesis:
	//   * 1: Warbond medal
	Type AssignmentRewardType `json:"type"`
}

// AssignmentRewardType Type of currency / reward granted upon assignment completion
// Hypothesis:
//   - 1: Warbond medal
type AssignmentRewardType int32

// AssignmentTask defines model for AssignmentTask.
type AssignmentTask struct {
	// Type Assignment task type, all values are not known yet
	// Guesses:
	//   * 11: Liberate planet
	Type        AssignmentTaskType `json:"type"`
	Values      []int32            `json:"values"`
	ValuesTypes []int32            `json:"valuesTypes"`
}

// AssignmentTaskType Assignment task type, all values are not known yet
// Guesses:
//   - 11: Liberate planet
type AssignmentTaskType int

// AssignmentType Assignment type, all values are not known yet
// Guesses:
//   - 4: Major order
type AssignmentType int

// BattleStatistics defines model for BattleStatistics.
type BattleStatistics struct {
	// Accurracy Player accuracy, ranges from 0 to 100. Typo is intentional, it is present in the upstream API
	Accuracy       int64 `json:"accurracy"`
	AutomatonKills int64 `json:"automatonKills"`
	BugKills       int64 `json:"bugKills"`

	// BulletsFired Total bullet fired. Values does not match with bulletHit statistics, as sometimes there are more bullet hits than fired.
	BulletsFired int64 `json:"bulletsFired"`

	// BulletsHit Total bullet hits. Values does not match with bulletFired statistics, as sometimes there are more bullet hits than fired.
	BulletsHit int64 `json:"bulletsHit"`

	// Deaths Cumulative number of helldivers deaths on duty
	Deaths int64 `json:"deaths"`

	// Friendlies Number of friendly kills ? Unsure.
	Friendlies      int64 `json:"friendlies"`
	IlluminateKills int64 `json:"illuminateKills"`

	// MissionSuccessRate Rate of mission success. Range from 0 to 100.
	MissionSuccessRate int64 `json:"missionSuccessRate"`
	MissionTime        int64 `json:"missionTime"`
	MissionsLost       int64 `json:"missionsLost"`
	MissionsWon        int64 `json:"missionsWon"`

	// Revives Number of revive stratagems used. Unclear as if whole teams revive after a wipe are counted.
	Revives int64 `json:"revives"`

	// TimePlayed cumulative number of seconds spent on mission
	TimePlayed int64 `json:"timePlayed"`
}

// CommunityTarget Placeholder object from WarSeasonStatus, purpose unknown
type CommunityTarget = map[string]interface{}

// EventTypeEnum Placeholder enum, values are not known
type EventTypeEnum int

// FactionEnum Identifier for a given Faction.
// * `1`: Super Earth
// * `2`: Terminids
// * `3`: Automatons
type FactionEnum int

// GlobalEvent Placeholder object from WarSeasonStatus, purpose unknown
type GlobalEvent = map[string]interface{}

// JointOperation defines model for JointOperation.
type JointOperation struct {
	// HqNodeIndex Purpose unknown
	HqNodeIndex int32 `json:"hqNodeIndex"`
	Id          int32 `json:"id"`
	PlanetIndex int32 `json:"planetIndex"`
}

// NewsEntry defines model for NewsEntry.
type NewsEntry struct {
	Id int32 `json:"id"`

	// Message Event message
	Message string `json:"message"`

	// Published Timestamp delta from war start ?
	Published int64         `json:"published"`
	TagIds    []interface{} `json:"tagIds"`

	// Type Always 0, purpose unknown
	Type int32 `json:"type"`
}

// PlanetActiveEffect Placeholder object from WarSeasonStatus, purpose unknown
type PlanetActiveEffect = map[string]interface{}

// PlanetAttack Edge in a directed graph. Represent supply lanes for available planet liberations.
type PlanetAttack struct {
	// Destination ID of a planet
	Destination int32 `json:"destination"`

	// Source ID of a planet
	Source int32 `json:"source"`
}

// PlanetEvent defines model for PlanetEvent.
type PlanetEvent struct {
	CampaignId int32 `json:"campaignId"`

	// EventType Placeholder enum, values are not known
	EventType EventTypeEnum `json:"eventType"`

	// ExpireTime Timestamp delta from war start ?
	ExpireTime int64 `json:"expireTime"`

	// Health Current health of the planet for this event
	Health int32 `json:"health"`
	Id     int32 `json:"id"`

	// JointOperationIds Links with the id present in objects from the "jointOperation" field in the response root.
	JointOperationIds []int32 `json:"jointOperationIds"`

	// MaxHealth Current health of the planet for this event
	MaxHealth   int32 `json:"maxHealth"`
	PlanetIndex int32 `json:"planetIndex"`

	// Race Identifier for a given Faction.
	// * `1`: Super Earth
	// * `2`: Terminids
	// * `3`: Automatons
	Race FactionEnum `json:"race"`

	// StartTime Timestamp delta from war start ?
	StartTime int64 `json:"startTime"`
}

// PlanetInfo defines model for PlanetInfo.
type PlanetInfo struct {
	// Disabled Purpose unknown, always false, might be used for future events
	Disabled bool  `json:"disabled"`
	Index    int32 `json:"index"`

	// InitialOwner Identifier for a given Faction.
	// * `1`: Super Earth
	// * `2`: Terminids
	// * `3`: Automatons
	InitialOwner FactionEnum `json:"initialOwner"`

	// MaxHealth Maximum health of the planet
	MaxHealth int32 `json:"maxHealth"`
	Position  struct {
		X float32 `json:"x"`
		Y float32 `json:"y"`
	} `json:"position"`

	// Sector Planet sector index
	Sector int32 `json:"sector"`

	// SettingsHash Purpose unknown
	SettingsHash int64 `json:"settingsHash"`

	// Waypoints Planet indexes that can be reached from this planet
	Waypoints []int32 `json:"waypoints"`
}

// PlanetStatus defines model for PlanetStatus.
type PlanetStatus struct {
	// Health Current health of the planet, seems to be capped at 1000000 for all the planets.
	Health int32 `json:"health"`

	// Index The planet identifier, used as a reference in other resources.
	Index int32 `json:"index"`

	// Owner Identifier for a given Faction.
	// * `1`: Super Earth
	// * `2`: Terminids
	// * `3`: Automatons
	Owner FactionEnum `json:"owner"`

	// Players Currently active helldivers on this planet
	Players int32 `json:"players"`

	// RegenPerSecond Health regeneration of the planet.
	// Notes:
	// * Most human planets seems to have a regeneration rate of 1388.8889 when no activity has occurred for a while.
	// * Hypothesis: planet regeneration rate go up based of the time spent at peace
	// * At time of writing, only the 4 values present in examples are used on all planets ([4.1666665, 2.777778, 0, 1388.8889])
	RegenPerSecond float32 `json:"regenPerSecond"`
}

// SuperEarthWarResult Placeholder object from WarSeasonStatus, purpose unknown
type SuperEarthWarResult = map[string]interface{}

// WarSeasonInfo defines model for WarSeasonInfo.
type WarSeasonInfo struct {
	EndDate    int64 `json:"endDate"`
	HomeWorlds []struct {
		PlanetIndices []int32 `json:"planetIndices"`

		// Race Identifier for a given Faction.
		// * `1`: Super Earth
		// * `2`: Terminids
		// * `3`: Automatons
		Race FactionEnum `json:"race"`
	} `json:"homeWorlds"`

	// MinimumClientVersion Minimum client version. Does not seems to match client version. Follows semver format.
	MinimumClientVersion string       `json:"minimumClientVersion"`
	PlanetInfos          []PlanetInfo `json:"planetInfos"`
	StartDate            int64        `json:"startDate"`
	WarId                int32        `json:"warId"`
}

// WarSeasonStatus defines model for WarSeasonStatus.
type WarSeasonStatus struct {
	ActiveElectionPolicyEffects []ActiveElectionPolicyEffect `json:"activeElectionPolicyEffects"`
	CommunityTargets            []CommunityTarget            `json:"communityTargets"`
	GlobalEvents                []GlobalEvent                `json:"globalEvents"`

	// ImpactMultiplier Purpose unknown
	ImpactMultiplier    float32              `json:"impactMultiplier"`
	JointOperations     []JointOperation     `json:"jointOperations"`
	PlanetActiveEffects []PlanetActiveEffect `json:"planetActiveEffects"`
	PlanetAttacks       []PlanetAttack       `json:"planetAttacks"`
	PlanetEvents        []PlanetEvent        `json:"planetEvents"`
	PlanetStatus        []PlanetStatus       `json:"planetStatus"`

	// StoryBeatId32 Purpose unknown
	StoryBeatId32        int64                 `json:"storyBeatId32"`
	SuperEarthWarResults []SuperEarthWarResult `json:"superEarthWarResults"`

	// Time Current timestamp from the beginning of the war ? Seems to incease with a 10 step.
	Time int64 `json:"time"`

	// WarId The war identifier
	WarId int32 `json:"warId"`
}

// WarStatistics defines model for WarStatistics.
type WarStatistics struct {
	GalaxyStats  BattleStatistics `json:"galaxy_stats"`
	PlanetsStats []struct {
		// Accurracy Player accuracy, ranges from 0 to 100. Typo is intentional, it is present in the upstream API
		Accuracy       int64 `json:"accurracy"`
		AutomatonKills int64 `json:"automatonKills"`
		BugKills       int64 `json:"bugKills"`

		// BulletsFired Total bullet fired. Values does not match with bulletHit statistics, as sometimes there are more bullet hits than fired.
		BulletsFired int64 `json:"bulletsFired"`

		// BulletsHit Total bullet hits. Values does not match with bulletFired statistics, as sometimes there are more bullet hits than fired.
		BulletsHit int64 `json:"bulletsHit"`

		// Deaths Cumulative number of helldivers deaths on duty
		Deaths int64 `json:"deaths"`

		// Friendlies Number of friendly kills ? Unsure.
		Friendlies      int64 `json:"friendlies"`
		IlluminateKills int64 `json:"illuminateKills"`

		// MissionSuccessRate Rate of mission success. Range from 0 to 100.
		MissionSuccessRate int64 `json:"missionSuccessRate"`
		MissionTime        int64 `json:"missionTime"`
		MissionsLost       int64 `json:"missionsLost"`
		MissionsWon        int64 `json:"missionsWon"`
		PlanetIndex        int32 `json:"planetIndex"`

		// Revives Number of revive stratagems used. Unclear as if whole teams revive after a wipe are counted.
		Revives int64 `json:"revives"`

		// TimePlayed cumulative number of seconds spent on mission
		TimePlayed int64 `json:"timePlayed"`
	} `json:"planets_stats"`
}

// GetNewsFeedWarIdParams defines parameters for GetNewsFeedWarId.
type GetNewsFeedWarIdParams struct {
	// FromTimestamp Timestamp used for pagination, entries before will be ignored.
	FromTimestamp *int `form:"fromTimestamp,omitempty" json:"fromTimestamp,omitempty"`

	// AcceptLanguage Language for event messages
	AcceptLanguage *string `json:"accept-language,omitempty"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetNewsFeedWarId request
	GetNewsFeedWarId(ctx context.Context, warId int, params *GetNewsFeedWarIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatsWarWarIdSummary request
	GetStatsWarWarIdSummary(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWarSeasonWarIdStatus request
	GetWarSeasonWarIdStatus(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWarSeasonWarIdWarInfo request
	GetWarSeasonWarIdWarInfo(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2AssignmentWarWarId request
	GetV2AssignmentWarWarId(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetNewsFeedWarId(ctx context.Context, warId int, params *GetNewsFeedWarIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNewsFeedWarIdRequest(c.Server, warId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatsWarWarIdSummary(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatsWarWarIdSummaryRequest(c.Server, warId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWarSeasonWarIdStatus(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWarSeasonWarIdStatusRequest(c.Server, warId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWarSeasonWarIdWarInfo(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWarSeasonWarIdWarInfoRequest(c.Server, warId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2AssignmentWarWarId(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2AssignmentWarWarIdRequest(c.Server, warId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetNewsFeedWarIdRequest generates requests for GetNewsFeedWarId
func NewGetNewsFeedWarIdRequest(server string, warId int, params *GetNewsFeedWarIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "war_id", runtime.ParamLocationPath, warId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/NewsFeed/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FromTimestamp != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fromTimestamp", runtime.ParamLocationQuery, *params.FromTimestamp); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "accept-language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("accept-language", headerParam0)
		}

	}

	return req, nil
}

// NewGetStatsWarWarIdSummaryRequest generates requests for GetStatsWarWarIdSummary
func NewGetStatsWarWarIdSummaryRequest(server string, warId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "war_id", runtime.ParamLocationPath, warId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Stats/war/%s/summary", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWarSeasonWarIdStatusRequest generates requests for GetWarSeasonWarIdStatus
func NewGetWarSeasonWarIdStatusRequest(server string, warId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "war_id", runtime.ParamLocationPath, warId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/WarSeason/%s/Status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWarSeasonWarIdWarInfoRequest generates requests for GetWarSeasonWarIdWarInfo
func NewGetWarSeasonWarIdWarInfoRequest(server string, warId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "war_id", runtime.ParamLocationPath, warId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/WarSeason/%s/WarInfo", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2AssignmentWarWarIdRequest generates requests for GetV2AssignmentWarWarId
func NewGetV2AssignmentWarWarIdRequest(server string, warId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "war_id", runtime.ParamLocationPath, warId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/Assignment/War/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetNewsFeedWarIdWithResponse request
	GetNewsFeedWarIdWithResponse(ctx context.Context, warId int, params *GetNewsFeedWarIdParams, reqEditors ...RequestEditorFn) (*GetNewsFeedWarIdResponse, error)

	// GetStatsWarWarIdSummaryWithResponse request
	GetStatsWarWarIdSummaryWithResponse(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*GetStatsWarWarIdSummaryResponse, error)

	// GetWarSeasonWarIdStatusWithResponse request
	GetWarSeasonWarIdStatusWithResponse(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*GetWarSeasonWarIdStatusResponse, error)

	// GetWarSeasonWarIdWarInfoWithResponse request
	GetWarSeasonWarIdWarInfoWithResponse(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*GetWarSeasonWarIdWarInfoResponse, error)

	// GetV2AssignmentWarWarIdWithResponse request
	GetV2AssignmentWarWarIdWithResponse(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*GetV2AssignmentWarWarIdResponse, error)
}

type GetNewsFeedWarIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NewsEntry
}

// Status returns HTTPResponse.Status
func (r GetNewsFeedWarIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNewsFeedWarIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatsWarWarIdSummaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WarStatistics
}

// Status returns HTTPResponse.Status
func (r GetStatsWarWarIdSummaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatsWarWarIdSummaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWarSeasonWarIdStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WarSeasonStatus
}

// Status returns HTTPResponse.Status
func (r GetWarSeasonWarIdStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWarSeasonWarIdStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWarSeasonWarIdWarInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WarSeasonInfo
}

// Status returns HTTPResponse.Status
func (r GetWarSeasonWarIdWarInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWarSeasonWarIdWarInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2AssignmentWarWarIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Assignment
}

// Status returns HTTPResponse.Status
func (r GetV2AssignmentWarWarIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2AssignmentWarWarIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetNewsFeedWarIdWithResponse request returning *GetNewsFeedWarIdResponse
func (c *ClientWithResponses) GetNewsFeedWarIdWithResponse(ctx context.Context, warId int, params *GetNewsFeedWarIdParams, reqEditors ...RequestEditorFn) (*GetNewsFeedWarIdResponse, error) {
	rsp, err := c.GetNewsFeedWarId(ctx, warId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNewsFeedWarIdResponse(rsp)
}

// GetStatsWarWarIdSummaryWithResponse request returning *GetStatsWarWarIdSummaryResponse
func (c *ClientWithResponses) GetStatsWarWarIdSummaryWithResponse(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*GetStatsWarWarIdSummaryResponse, error) {
	rsp, err := c.GetStatsWarWarIdSummary(ctx, warId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatsWarWarIdSummaryResponse(rsp)
}

// GetWarSeasonWarIdStatusWithResponse request returning *GetWarSeasonWarIdStatusResponse
func (c *ClientWithResponses) GetWarSeasonWarIdStatusWithResponse(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*GetWarSeasonWarIdStatusResponse, error) {
	rsp, err := c.GetWarSeasonWarIdStatus(ctx, warId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWarSeasonWarIdStatusResponse(rsp)
}

// GetWarSeasonWarIdWarInfoWithResponse request returning *GetWarSeasonWarIdWarInfoResponse
func (c *ClientWithResponses) GetWarSeasonWarIdWarInfoWithResponse(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*GetWarSeasonWarIdWarInfoResponse, error) {
	rsp, err := c.GetWarSeasonWarIdWarInfo(ctx, warId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWarSeasonWarIdWarInfoResponse(rsp)
}

// GetV2AssignmentWarWarIdWithResponse request returning *GetV2AssignmentWarWarIdResponse
func (c *ClientWithResponses) GetV2AssignmentWarWarIdWithResponse(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*GetV2AssignmentWarWarIdResponse, error) {
	rsp, err := c.GetV2AssignmentWarWarId(ctx, warId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2AssignmentWarWarIdResponse(rsp)
}

// ParseGetNewsFeedWarIdResponse parses an HTTP response from a GetNewsFeedWarIdWithResponse call
func ParseGetNewsFeedWarIdResponse(rsp *http.Response) (*GetNewsFeedWarIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNewsFeedWarIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NewsEntry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStatsWarWarIdSummaryResponse parses an HTTP response from a GetStatsWarWarIdSummaryWithResponse call
func ParseGetStatsWarWarIdSummaryResponse(rsp *http.Response) (*GetStatsWarWarIdSummaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatsWarWarIdSummaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WarStatistics
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetWarSeasonWarIdStatusResponse parses an HTTP response from a GetWarSeasonWarIdStatusWithResponse call
func ParseGetWarSeasonWarIdStatusResponse(rsp *http.Response) (*GetWarSeasonWarIdStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWarSeasonWarIdStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WarSeasonStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetWarSeasonWarIdWarInfoResponse parses an HTTP response from a GetWarSeasonWarIdWarInfoWithResponse call
func ParseGetWarSeasonWarIdWarInfoResponse(rsp *http.Response) (*GetWarSeasonWarIdWarInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWarSeasonWarIdWarInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WarSeasonInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV2AssignmentWarWarIdResponse parses an HTTP response from a GetV2AssignmentWarWarIdWithResponse call
func ParseGetV2AssignmentWarWarIdResponse(rsp *http.Response) (*GetV2AssignmentWarWarIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2AssignmentWarWarIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Assignment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /NewsFeed/{war_id})
	GetNewsFeedWarId(ctx echo.Context, warId int, params GetNewsFeedWarIdParams) error

	// (GET /Stats/war/{war_id}/summary)
	GetStatsWarWarIdSummary(ctx echo.Context, warId int) error

	// (GET /WarSeason/{war_id}/Status)
	GetWarSeasonWarIdStatus(ctx echo.Context, warId int) error

	// (GET /WarSeason/{war_id}/WarInfo)
	GetWarSeasonWarIdWarInfo(ctx echo.Context, warId int) error

	// (GET /v2/Assignment/War/{war_id})
	GetV2AssignmentWarWarId(ctx echo.Context, warId int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetNewsFeedWarId converts echo context to params.
func (w *ServerInterfaceWrapper) GetNewsFeedWarId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "war_id" -------------
	var warId int

	err = runtime.BindStyledParameterWithOptions("simple", "war_id", ctx.Param("war_id"), &warId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter war_id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNewsFeedWarIdParams
	// ------------- Optional query parameter "fromTimestamp" -------------

	err = runtime.BindQueryParameter("form", true, false, "fromTimestamp", ctx.QueryParams(), &params.FromTimestamp)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fromTimestamp: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Optional header parameter "accept-language" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("accept-language")]; found {
		var AcceptLanguage string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for accept-language, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "accept-language", valueList[0], &AcceptLanguage, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accept-language: %s", err))
		}

		params.AcceptLanguage = &AcceptLanguage
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNewsFeedWarId(ctx, warId, params)
	return err
}

// GetStatsWarWarIdSummary converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatsWarWarIdSummary(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "war_id" -------------
	var warId int

	err = runtime.BindStyledParameterWithOptions("simple", "war_id", ctx.Param("war_id"), &warId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter war_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStatsWarWarIdSummary(ctx, warId)
	return err
}

// GetWarSeasonWarIdStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetWarSeasonWarIdStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "war_id" -------------
	var warId int

	err = runtime.BindStyledParameterWithOptions("simple", "war_id", ctx.Param("war_id"), &warId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter war_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetWarSeasonWarIdStatus(ctx, warId)
	return err
}

// GetWarSeasonWarIdWarInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetWarSeasonWarIdWarInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "war_id" -------------
	var warId int

	err = runtime.BindStyledParameterWithOptions("simple", "war_id", ctx.Param("war_id"), &warId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter war_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetWarSeasonWarIdWarInfo(ctx, warId)
	return err
}

// GetV2AssignmentWarWarId converts echo context to params.
func (w *ServerInterfaceWrapper) GetV2AssignmentWarWarId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "war_id" -------------
	var warId int

	err = runtime.BindStyledParameterWithOptions("simple", "war_id", ctx.Param("war_id"), &warId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter war_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV2AssignmentWarWarId(ctx, warId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/NewsFeed/:war_id", wrapper.GetNewsFeedWarId)
	router.GET(baseURL+"/Stats/war/:war_id/summary", wrapper.GetStatsWarWarIdSummary)
	router.GET(baseURL+"/WarSeason/:war_id/Status", wrapper.GetWarSeasonWarIdStatus)
	router.GET(baseURL+"/WarSeason/:war_id/WarInfo", wrapper.GetWarSeasonWarIdWarInfo)
	router.GET(baseURL+"/v2/Assignment/War/:war_id", wrapper.GetV2AssignmentWarWarId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
